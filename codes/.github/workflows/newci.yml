# This is a basic workflow to help you get started with Actions
name: Django CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:

    runs-on: ubuntu-latest
    outputs:
      customtag: ${{steps.tager.outputs.tag}}
    steps:
    - uses: actions/checkout@v2
    - name: Setup PostgreSQL
      uses: Harmon758/postgresql-action@v1.0.0
      with:
        postgresql version: 12
        postgresql db: massdb
        postgresql user: mass
        postgresql password: password 
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        export JWT_SECRET=${{ secrets.JWT_SECRET }}
    - name: Run Tests
      run: |
        # python manage.py test
        python manage.py migrate 
    - name: Build & push Docker image
      run: |
        docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_ACCES_TOKEN }}
        docker build -t img .
    - id: tager
      run: |
        export TAG=latest
        docker images --format "{{.ID}}" img > $TAG
        echo "::set-output name=tag::$(cat $TAG)"
    - name: test tag
      run: |
        echo ${{ steps.tager.outputs.tag }}
        docker image tag img ${{ secrets.DOCKER_LOGIN }}/codes:${{ steps.tager.outputs.tag }}
        docker image push ${{ secrets.DOCKER_LOGIN }}/codes:${{ steps.tager.outputs.tag }}
        docker images 
  deploy:
    runs-on: test-server
    needs: [test]
    steps:
      - name: start the deployment
        run: |
          docker service inspect --pretty codes
          docker image pull ${{ secrets.DOCKER_LOGIN }}/codes:${{needs.test.outputs.customtag}}
          docker service update --image ${{ secrets.DOCKER_LOGIN }}/codes:${{needs.test.outputs.customtag}} codes
          docker service inspect --pretty codes

